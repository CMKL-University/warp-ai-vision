"use strict";(self.webpackChunkwarp_ai=self.webpackChunkwarp_ai||[]).push([[660],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),g=i,d=u["".concat(p,".").concat(g)]||u[g]||m[g]||r;return t?a.createElement(d,o(o({ref:n},c),{},{components:t})):a.createElement(d,o({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6434:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:1},p="Operations with Images in OpenCV",l={unversionedId:"Basic-Computer-Vision/basicOpenCV",id:"Basic-Computer-Vision/basicOpenCV",title:"Operations with Images in OpenCV",description:"To use OpenCV in Python, you need to install the openCV module using conda command.",source:"@site/docs/Basic-Computer-Vision/basicOpenCV.md",sourceDirName:"Basic-Computer-Vision",slug:"/Basic-Computer-Vision/basicOpenCV",permalink:"/warp-ai-vision/docs/Basic-Computer-Vision/basicOpenCV",draft:!1,editUrl:"https://github.com/CMKL-University/warp-ai-vision/tree/main/warp-ai/docs/Basic-Computer-Vision/basicOpenCV.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Setting Up",permalink:"/warp-ai-vision/docs/intro"},next:{title:"Bitmap, Filters and Image Kernel",permalink:"/warp-ai-vision/docs/Basic-Computer-Vision/bitmap-filter-image-kernel"}},c={},m=[{value:"Input/Output",id:"inputoutput",level:2},{value:"Color Spaces in OpenCV",id:"color-spaces-in-opencv",level:2},{value:"Arithmetic Operations on Images",id:"arithmetic-operations-on-images",level:2},{value:"Addition",id:"addition",level:3},{value:"Subtraction",id:"subtraction",level:3},{value:"Bitwise",id:"bitwise",level:3},{value:"Scaling an Image",id:"scaling-an-image",level:3},{value:"Rotating an Image",id:"rotating-an-image",level:2}],u={toc:m};function g(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"operations-with-images-in-opencv"},"Operations with Images in OpenCV"),(0,r.kt)("p",null,"To use OpenCV in Python, you need to install the openCV module using ",(0,r.kt)("inlineCode",{parentName:"p"},"conda")," command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"conda install opencv\n")),(0,r.kt)("p",null,"Now you can import OpenCV into your Python code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import cv2 as cv\n")),(0,r.kt)("h2",{id:"inputoutput"},"Input/Output"),(0,r.kt)("p",null,"To load an image from a file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Load 'test.jpg' image from your current directory\nimg = cv.imread(\"test.jpg\")\n# Load 'test.jpg' image from 'pictures' directory\nimg = cv.imread(\"pictures/test.jpg\") \n\n# Load image from 'filename' variable\nfilename = \"test.jpg\"\nimg = cv.imread(filename)\n")),(0,r.kt)("p",null,"If you read a jpg file, a 3 channel image is created by default. If you need a grayscale image, use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'filename = "test.jpg"\n# read test.jpg but it read our image as grayscale\nimg = cv.imread(filename, cv.IMREAD_GRAYSCALE)\n\n# print shape of image\nprint(img.shape)\n')),(0,r.kt)("p",null,"To save/write your image from OpenCV:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# write 'img' to your path\ncv.imwrite('test2.jpg', img)\n")),(0,r.kt)("p",null,"To show your image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# show 'img' with title name 'test show image'\ncv.imshow('test show image',img)\n# show image for 5 seconds (5000 ms) before it automatically close it\ncv.waitKey(5000)\n# or you can use this line, it will wait until you pressed any key\ncv.waitKey(0)\n\ncv.destroyAllWindows()\n")),(0,r.kt)("h2",{id:"color-spaces-in-opencv"},"Color Spaces in OpenCV"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Color spaces")," are a way to represent the color channels present in the image that gives the image that particular hue.\xa0",(0,r.kt)("strong",{parentName:"p"},"BGR color space:"),"\xa0OpenCV\u2019s default color space is RGB. However, it actually stores color in the BGR format. "),(0,r.kt)("p",null,"To visualize the different color channels of RGB image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import cv2 as cv\n\n# you can use any image on your computer\nimg = cv.imread(\'cat.jpg\')\n# seperate each channel of RGB image\nB, G, R = cv.split(img)\n\n# show each channel\ncv.imshow("original", img)\ncv.waitKey(0)\n \ncv.imshow("blue", B)\ncv.waitKey(0)\n \ncv.imshow("Green", G)\ncv.waitKey(0)\n \ncv.imshow("red", R)\ncv.waitKey(0)\n \ncv.destroyAllWindows()\n')),(0,r.kt)("h2",{id:"arithmetic-operations-on-images"},"Arithmetic Operations on Images"),(0,r.kt)("p",null,"We can applied arithmetic operations like Addition, Subtraction, and Bitwise Operation to our input images."),(0,r.kt)("h3",{id:"addition"},"Addition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"cv.add(img1, img2)\n")),(0,r.kt)("h3",{id:"subtraction"},"Subtraction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"cv.subtract(img1, img2)\n")),(0,r.kt)("h3",{id:"bitwise"},"Bitwise"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: In bitwise operation, both images must have the same dimensions.")),(0,r.kt)("p",null,"Parameters for AND, OR, XOR\n",(0,r.kt)("inlineCode",{parentName:"p"},"source1")," : First Input Image array(Single-channel, 8-bit or floating-point)\n",(0,r.kt)("inlineCode",{parentName:"p"},"source2")," : Second Input Image array(Single-channel, 8-bit or floating-point)\n",(0,r.kt)("inlineCode",{parentName:"p"},"dest")," : Output array (Similar to the dimensions and type of Input image array)\n",(0,r.kt)("inlineCode",{parentName:"p"},"mask"),": Operation mask, Input / output 8-bit single-channel mask "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"dest_and =  cv.bitwise_and(img1, img2, mask=None)\ndest_or = cv.bitwise_or(img2, img1, mask = None)\ndest_xor = cv.bitwise_xor(img1, img2, mask = None)\n")),(0,r.kt)("p",null,"Parameters for NOT\n",(0,r.kt)("inlineCode",{parentName:"p"},"source")," : Input Image array(Single-channel, 8-bit or floating-point)\n",(0,r.kt)("inlineCode",{parentName:"p"},"dest")," : Output array (Similar to the dimensions and type of Input image array)\n",(0,r.kt)("inlineCode",{parentName:"p"},"mask")," : Operation mask, Input / output 8-bit single-channel mask "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"dest_not1 = cv.bitwise_not(img1, mask = None)\ndest_not2 = cv.bitwise_not(img2, mask = None)\n")),(0,r.kt)("p",null,"##Image Processing in Python"),(0,r.kt)("h3",{id:"scaling-an-image"},"Scaling an Image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import cv2 as cv\nimport numpy as np\n\nfilename = 'cat.jpg'\nimg = cv.imread(filename)\n\n# Get number of pixel horizontally and vertically\n(height, width) = img.shape[:2]\n\nres = cv.resize(img, (int(width / 2), int(height / 2)), interpolation = cv.INTER_CUBIC)\n\ncv.imwrite(\"result.jpg\", res)\n")),(0,r.kt)("p",null,"Now you can check the dimensions of original and result image."),(0,r.kt)("h2",{id:"rotating-an-image"},"Rotating an Image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import cv2 as cv\nimport numpy as np\n\nfilename = 'cat.jpg'\nimg = cv.imread(filename)\n\n# Shape of image in terms of pixels.\n(rows, cols) = img.shape[:2]\n\n# getRotationMatrix2D creates a matrix needed for transformation.\n# We want matrix for rotation w.r.t center to 45 degree without scaling.\nM = cv.getRotationMatrix2D((cols / 2, rows / 2), 45, 1)\nres = cv.warpAffine(img, M, (cols, rows))\n\ncv.imshow(\"rotated!\", res)\ncv.waitKey(0)\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Acknowledgement :")," The content of this document has been adapted from the original ",(0,r.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/opencv-python-tutorial/"},"OpenCV Python Tutorial")," from GeeksforGeeks"))}g.isMDXComponent=!0}}]);