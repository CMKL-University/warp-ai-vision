"use strict";(self.webpackChunkwarp_ai=self.webpackChunkwarp_ai||[]).push([[489],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),g=r,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||a;return t?i.createElement(d,o(o({ref:n},c),{},{components:t})):i.createElement(d,o({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5027:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],l={sidebar_position:3},s="Bitmap, Filters and Image Kernel",p={unversionedId:"Basic-Computer-Vision/bitmap-filter-image-kernel",id:"Basic-Computer-Vision/bitmap-filter-image-kernel",title:"Bitmap, Filters and Image Kernel",description:"Bitmap",source:"@site/docs/Basic-Computer-Vision/bitmap-filter-image-kernel.md",sourceDirName:"Basic-Computer-Vision",slug:"/Basic-Computer-Vision/bitmap-filter-image-kernel",permalink:"/warp-ai-vision/docs/Basic-Computer-Vision/bitmap-filter-image-kernel",draft:!1,editUrl:"https://github.com/CMKL-University/warp-ai-vision/tree/main/warp-ai/docs/Basic-Computer-Vision/bitmap-filter-image-kernel.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Operations with Images in OpenCV",permalink:"/warp-ai-vision/docs/Basic-Computer-Vision/basicOpenCV"},next:{title:"Hough Line Transform in OpenCV",permalink:"/warp-ai-vision/docs/Basic-Computer-Vision/opencv"}},c={},m=[{value:"Bitmap",id:"bitmap",level:2},{value:"Filters",id:"filters",level:2},{value:"Edge Detection in an Image",id:"edge-detection-in-an-image",level:3},{value:"Image Blurring",id:"image-blurring",level:3},{value:"Image Kernel",id:"image-kernel",level:2},{value:"Kernel and Convolutions with OpenCV",id:"kernel-and-convolutions-with-opencv",level:3}],u={toc:m};function g(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bitmap-filters-and-image-kernel"},"Bitmap, Filters and Image Kernel"),(0,a.kt)("h2",{id:"bitmap"},"Bitmap"),(0,a.kt)("p",null,"Bitmap, method by which a display space (such as ",(0,a.kt)("a",{parentName:"p",href:"https://www.britannica.com/art/graphic-art"},"graphics")," image file) is defined, including the ",(0,a.kt)("a",{parentName:"p",href:"https://www.britannica.com/science/color"},"colour")," of each of its\xa0",(0,a.kt)("a",{parentName:"p",href:"https://www.britannica.com/technology/pixel"},"pixels")," (or\xa0",(0,a.kt)("a",{parentName:"p",href:"https://www.britannica.com/technology/bit-communications"},"bits"),"). "),(0,a.kt)("p",null,"Here are additional resources for ",(0,a.kt)("a",{parentName:"p",href:"http://paulbourke.net/dataformats/bitmaps/"},"bitmaps"),"."),(0,a.kt)("h2",{id:"filters"},"Filters"),(0,a.kt)("p",null,"Filtering techniques are use to enhance and modify digital images. Also, images filters are use to blurring and noise reduction, sharpening and edge detection. Image filters are mainly use for suppress high (smoothing techniques) and low frequencies(image enhancement, edge detection). Classification of image filters is as follows."),(0,a.kt)("p",null,"Here are additional resources for ",(0,a.kt)("a",{parentName:"p",href:"https://towardsai.net/p/computer-vision/image-processing-using-spatial-filters"},"image processing using spatial filters.")),(0,a.kt)("h3",{id:"edge-detection-in-an-image"},"Edge Detection in an Image"),(0,a.kt)("p",null,"The process of image detection involves detecting sharp edges in the image. We\u2019ll be using one such algorithm known as ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Canny_edge_detector"},"Canny Edge Detection"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import cv2 as cv\nimport numpy as np\n\nfilename = 'cat.jpg'\nimg = cv.imread(filename)\n\n# Canny edge detection.\nedges = cv.Canny(img, 100, 200)\n\ncv.imshow(\"canny!\", edges)\ncv.waitKey(0)\n")),(0,a.kt)("h3",{id:"image-blurring"},"Image Blurring"),(0,a.kt)("p",null,"Image Blurring refers to making the image less clear or distinct. It is done with the help of various low pass filter kernels. ",(0,a.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/python-image-blurring-using-opencv/"},"For more details about blurring"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import cv2 as cv\nimport numpy as np\n\nfilename = 'cat.jpg'\nimg = cv.imread(filename)\n\ncv.imshow('Original Image', img)\ncv.waitKey(0)\n  \n# Gaussian Blur\nGaussian = cv.GaussianBlur(img, (7, 7), 0)\ncv.imshow('Gaussian Blurring', Gaussian)\ncv.waitKey(0)\n  \n# Median Blur\nmedian = cv.medianBlur(img, 5)\ncv.imshow('Median Blurring', median)\ncv.waitKey(0)\n  \n  \n# Bilateral Blur\nbilateral = cv.bilateralFilter(img, 9, 75, 75)\ncv.imshow('Bilateral Blurring', bilateral)\ncv.waitKey(0)\n\ncv.destroyAllWindows()\n")),(0,a.kt)("h2",{id:"image-kernel"},"Image Kernel"),(0,a.kt)("p",null,"An image kernel is a small matrix used to apply effects like the ones you might find in Photoshop or Gimp, such as blurring, sharpening, outlining or embossing. They're also used in machine learning for 'feature extraction', a technique for determining the most important portions of an image. In this context the process is referred to more generally as \"convolution\" (see:\xa0",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Convolutional_neural_network"},"convolutional neural networks"),".)"),(0,a.kt)("p",null,"Here are additional resources for ",(0,a.kt)("a",{parentName:"p",href:"https://setosa.io/ev/image-kernels/"},"image kernel visualization"),"."),(0,a.kt)("h3",{id:"kernel-and-convolutions-with-opencv"},"Kernel and Convolutions with OpenCV"),(0,a.kt)("p",null,"Here are some examples of kernels."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# identity kernel\n[[0, 0, 0],\n [0, 1, 0],\n [0, 0, 0]]\n# Gaussian Blur\n[[1,  4,  6,  4, 1],\n [4, 16, 24, 16, 4],\n [6, 24, 36, 24, 6],\n [4, 16, 24, 16, 4],\n [1,  4,  6,  4, 1]] \n")),(0,a.kt)("p",null,"For more details, visit this ",(0,a.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/basics-of-kernels-and-convolutions-with-opencv-c15311ab8f55"},"site"),".\nThere are lots of kernels that we can use. Here are ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Kernel_(image_processing)"},"some examples"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import cv2 as cv\nimport numpy as np\n\nfilename = 'cat.jpg'\nimg = cv.imread(filename)\nimg = cv.cvtColor(img, cv.COLOR_BGR2RGB)\n\ncv.imshow(\"Image\", img)\ncv.waitKey(0)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Box Blur Kernel")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# creating box blur kernel\nkernel = np.ones((3, 3), np.float32) / 9\nprint(kernel)\n\n# now apply our box blur kernel with our image using `.filter2D`\nresult = cv.filter2D(img, -1, kernel)\n\ncv.imshow("box_blur", result)\ncv.waitKey(0)\ncv.destroyAllWindows()\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Sharpen Kernel")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# creating sharpen kernel\nkernel = np.array([[0, -1, 0],\n                   [-1, 5, -1],\n                   [0, -1, 0]])\nprint(kernel)\n\n# now apply our sharpen kernel with our image using `.filter2D`\nresult = cv.filter2D(img, -1, kernel)\n\ncv.imshow("sharpen", result)\ncv.waitKey(0)\ncv.destroyAllWindows()\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Acknowledgement :")," The content of this document has been adapted from these original website"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.britannica.com/technology/bitmap"},"Bitmap")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://medium.com/@shashikadilhani97/digital-image-processing-filters-832ec6d18a73"},"Filters")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/image-processing-in-python-scaling-rotating-shifting-and-edge-detection/?ref=lbp"},"Edge Detection")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/filter-color-with-opencv/"},"Filter OpenCV")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://setosa.io/ev/image-kernels/"},"Image Kernel")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://towardsdatascience.com/basics-of-kernels-and-convolutions-with-opencv-c15311ab8f55"},"Kernel and Convolutions with OpenCV"))))}g.isMDXComponent=!0}}]);